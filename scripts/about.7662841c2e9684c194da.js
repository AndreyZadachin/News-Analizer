!function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=119)}([function(t,e,i){(function(e){var i=function(t){return t&&t.Math==Math&&t};t.exports=i("object"==typeof globalThis&&globalThis)||i("object"==typeof window&&window)||i("object"==typeof self&&self)||i("object"==typeof e&&e)||Function("return this")()}).call(this,i(49))},function(t,e,i){var n=i(0),r=i(10),o=i(24),s=i(42),a=n.Symbol,c=r("wks");t.exports=function(t){return c[t]||(c[t]=s&&a[t]||(s?a:o)("Symbol."+t))}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,i){"use strict";i.d(e,"g",(function(){return n})),i.d(e,"l",(function(){return r})),i.d(e,"i",(function(){return o})),i.d(e,"k",(function(){return s})),i.d(e,"j",(function(){return a})),i.d(e,"b",(function(){return c})),i.d(e,"c",(function(){return l})),i.d(e,"m",(function(){return h})),i.d(e,"e",(function(){return u})),i.d(e,"d",(function(){return f})),i.d(e,"f",(function(){return d})),i.d(e,"h",(function(){return p})),i.d(e,"a",(function(){return v}));var n=5184e5,r=document.querySelector(".search__input"),o=document.querySelector(".news-card"),s=document.querySelector(".search__button"),a=document.querySelector(".search__field"),c=0,l=20,h="https://api.github.com/repos/AndreyZadachin/DiplomFront/commits",u=document.querySelector(".request__title-span"),f=document.querySelector(".request__text-span"),d=document.querySelector(".request__text-span_title"),p=(document.querySelectorAll(".analitic__table-date"),["ЯНВАРЬ","ФЕВРАЛЬ","МАРТ","АПРЕЛЬ","МАЙ","ИЮНЬ","ИЮЛЬ","АВГУСТ","СЕНТЯБРЬ","ОКТЯБРЬ","НОЯБРЬ","ДЕКАБРЬ"]),v=["вс","пн","вт","ср","чт","пт","сб"]},function(t,e){var i={}.hasOwnProperty;t.exports=function(t,e){return i.call(t,e)}},function(t,e,i){var n=i(3);t.exports=!n((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,i){var n=i(2);t.exports=function(t){if(!n(t))throw TypeError(String(t)+" is not an object");return t}},function(t,e,i){var n=i(6),r=i(11),o=i(23);t.exports=n?function(t,e,i){return r.f(t,e,o(1,i))}:function(t,e,i){return t[e]=i,t}},function(t,e){var i={}.toString;t.exports=function(t){return i.call(t).slice(8,-1)}},function(t,e,i){var n=i(27),r=i(53);(t.exports=function(t,e){return r[t]||(r[t]=void 0!==e?e:{})})("versions",[]).push({version:"3.4.1",mode:n?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e,i){var n=i(6),r=i(28),o=i(7),s=i(22),a=Object.defineProperty;e.f=n?a:function(t,e,i){if(o(t),e=s(e,!0),o(i),r)try{return a(t,e,i)}catch(t){}if("get"in i||"set"in i)throw TypeError("Accessors not supported");return"value"in i&&(t[e]=i.value),t}},function(t,e,i){var n=i(45),r=i(0),o=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,e){return arguments.length<2?o(n[t])||o(r[t]):n[t]&&n[t][e]||r[t]&&r[t][e]}},function(t,e,i){var n=i(25),r=i(21);t.exports=function(t){return n(r(t))}},function(t,e,i){var n=i(0),r=i(10),o=i(8),s=i(5),a=i(16),c=i(30),l=i(31),h=l.get,u=l.enforce,f=String(c).split("toString");r("inspectSource",(function(t){return c.call(t)})),(t.exports=function(t,e,i,r){var c=!!r&&!!r.unsafe,l=!!r&&!!r.enumerable,h=!!r&&!!r.noTargetGet;"function"==typeof i&&("string"!=typeof e||s(i,"name")||o(i,"name",e),u(i).source=f.join("string"==typeof e?e:"")),t!==n?(c?!h&&t[e]&&(l=!0):delete t[e],l?t[e]=i:o(t,e,i)):l?t[e]=i:a(e,i)})(Function.prototype,"toString",(function(){return"function"==typeof this&&h(this).source||c.call(this)}))},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},function(t,e,i){var n=i(0),r=i(8);t.exports=function(t,e){try{r(n,t,e)}catch(i){n[t]=e}return e}},function(t,e,i){var n=i(6),r=i(43),o=i(23),s=i(13),a=i(22),c=i(5),l=i(28),h=Object.getOwnPropertyDescriptor;e.f=n?h:function(t,e){if(t=s(t),e=a(e,!0),l)try{return h(t,e)}catch(t){}if(c(t,e))return o(!r.f.call(t,e),t[e])}},function(t,e,i){var n=i(26),r=Math.min;t.exports=function(t){return t>0?r(n(t),9007199254740991):0}},function(t,e){t.exports={}},function(t,e,i){var n=i(15);t.exports=function(t,e,i){if(n(t),void 0===e)return t;switch(i){case 0:return function(){return t.call(e)};case 1:return function(i){return t.call(e,i)};case 2:return function(i,n){return t.call(e,i,n)};case 3:return function(i,n,r){return t.call(e,i,n,r)}}return function(){return t.apply(e,arguments)}}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},function(t,e,i){var n=i(2);t.exports=function(t,e){if(!n(t))return t;var i,r;if(e&&"function"==typeof(i=t.toString)&&!n(r=i.call(t)))return r;if("function"==typeof(i=t.valueOf)&&!n(r=i.call(t)))return r;if(!e&&"function"==typeof(i=t.toString)&&!n(r=i.call(t)))return r;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){var i=0,n=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++i+n).toString(36)}},function(t,e,i){var n=i(3),r=i(9),o="".split;t.exports=n((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==r(t)?o.call(t,""):Object(t)}:Object},function(t,e){var i=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:i)(t)}},function(t,e){t.exports=!1},function(t,e,i){var n=i(6),r=i(3),o=i(29);t.exports=!n&&!r((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(t,e,i){var n=i(0),r=i(2),o=n.document,s=r(o)&&r(o.createElement);t.exports=function(t){return s?o.createElement(t):{}}},function(t,e,i){var n=i(10);t.exports=n("native-function-to-string",Function.toString)},function(t,e,i){var n,r,o,s=i(55),a=i(0),c=i(2),l=i(8),h=i(5),u=i(33),f=i(19),d=a.WeakMap;if(s){var p=new d,v=p.get,g=p.has,m=p.set;n=function(t,e){return m.call(p,t,e),e},r=function(t){return v.call(p,t)||{}},o=function(t){return g.call(p,t)}}else{var y=u("state");f[y]=!0,n=function(t,e){return l(t,y,e),e},r=function(t){return h(t,y)?t[y]:{}},o=function(t){return h(t,y)}}t.exports={set:n,get:r,has:o,enforce:function(t){return o(t)?r(t):n(t,{})},getterFor:function(t){return function(e){var i;if(!c(e)||(i=r(e)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return i}}}},function(t,e,i){var n,r;!function(o,s){n=[i(101)],void 0===(r=function(t){return function(t,e){"use strict";var i={extend:function(t,e){for(var i in e)t[i]=e[i];return t},modulo:function(t,e){return(t%e+e)%e}},n=Array.prototype.slice;i.makeArray=function(t){return Array.isArray(t)?t:null==t?[]:"object"==typeof t&&"number"==typeof t.length?n.call(t):[t]},i.removeFrom=function(t,e){var i=t.indexOf(e);-1!=i&&t.splice(i,1)},i.getParent=function(t,i){for(;t.parentNode&&t!=document.body;)if(t=t.parentNode,e(t,i))return t},i.getQueryElement=function(t){return"string"==typeof t?document.querySelector(t):t},i.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},i.filterFindElements=function(t,n){t=i.makeArray(t);var r=[];return t.forEach((function(t){if(t instanceof HTMLElement)if(n){e(t,n)&&r.push(t);for(var i=t.querySelectorAll(n),o=0;o<i.length;o++)r.push(i[o])}else r.push(t)})),r},i.debounceMethod=function(t,e,i){i=i||100;var n=t.prototype[e],r=e+"Timeout";t.prototype[e]=function(){var t=this[r];clearTimeout(t);var e=arguments,o=this;this[r]=setTimeout((function(){n.apply(o,e),delete o[r]}),i)}},i.docReady=function(t){var e=document.readyState;"complete"==e||"interactive"==e?setTimeout(t):document.addEventListener("DOMContentLoaded",t)},i.toDashed=function(t){return t.replace(/(.)([A-Z])/g,(function(t,e,i){return e+"-"+i})).toLowerCase()};var r=t.console;return i.htmlInit=function(e,n){i.docReady((function(){var o=i.toDashed(n),s="data-"+o,a=document.querySelectorAll("["+s+"]"),c=document.querySelectorAll(".js-"+o),l=i.makeArray(a).concat(i.makeArray(c)),h=s+"-options",u=t.jQuery;l.forEach((function(t){var i,o=t.getAttribute(s)||t.getAttribute(h);try{i=o&&JSON.parse(o)}catch(e){return void(r&&r.error("Error parsing "+s+" on "+t.className+": "+e))}var a=new e(t,i);u&&u.data(t,n,a)}))}))},i}(o,t)}.apply(e,n))||(t.exports=r)}(window)},function(t,e,i){var n=i(10),r=i(24),o=n("keys");t.exports=function(t){return o[t]||(o[t]=r(t))}},function(t,e,i){var n=i(0),r=i(17).f,o=i(8),s=i(14),a=i(16),c=i(44),l=i(37);t.exports=function(t,e){var i,h,u,f,d,p=t.target,v=t.global,g=t.stat;if(i=v?n:g?n[p]||a(p,{}):(n[p]||{}).prototype)for(h in e){if(f=e[h],u=t.noTargetGet?(d=r(i,h))&&d.value:i[h],!l(v?h:p+(g?".":"#")+h,t.forced)&&void 0!==u){if(typeof f==typeof u)continue;c(f,u)}(t.sham||u&&u.sham)&&o(f,"sham",!0),s(i,h,f,t)}}},function(t,e,i){var n=i(46),r=i(36).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,r)}},function(t,e){t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(t,e,i){var n=i(3),r=/#|\.prototype\./,o=function(t,e){var i=a[s(t)];return i==l||i!=c&&("function"==typeof e?n(e):!!e)},s=o.normalize=function(t){return String(t).replace(r,".").toLowerCase()},a=o.data={},c=o.NATIVE="N",l=o.POLYFILL="P";t.exports=o},function(t,e,i){var n,r;!function(o,s){n=[i(87),i(91),i(32),i(102),i(103),i(104)],void 0===(r=function(t,e,i,n,r,s){return function(t,e,i,n,r,o,s){"use strict";var a=t.jQuery,c=t.getComputedStyle,l=t.console;function h(t,e){for(t=n.makeArray(t);t.length;)e.appendChild(t.shift())}var u=0,f={};function d(t,e){var i=n.getQueryElement(t);if(i){if(this.element=i,this.element.flickityGUID){var r=f[this.element.flickityGUID];return r.option(e),r}a&&(this.$element=a(this.element)),this.options=n.extend({},this.constructor.defaults),this.option(e),this._create()}else l&&l.error("Bad element for Flickity: "+(i||t))}d.defaults={accessibility:!0,cellAlign:"center",freeScrollFriction:.075,friction:.28,namespaceJQueryEvents:!0,percentPosition:!0,resize:!0,selectedAttraction:.025,setGallerySize:!0},d.createMethods=[];var p=d.prototype;n.extend(p,e.prototype),p._create=function(){var e=this.guid=++u;for(var i in this.element.flickityGUID=e,f[e]=this,this.selectedIndex=0,this.restingFrames=0,this.x=0,this.velocity=0,this.originSide=this.options.rightToLeft?"right":"left",this.viewport=document.createElement("div"),this.viewport.className="flickity-viewport",this._createSlider(),(this.options.resize||this.options.watchCSS)&&t.addEventListener("resize",this),this.options.on){var n=this.options.on[i];this.on(i,n)}d.createMethods.forEach((function(t){this[t]()}),this),this.options.watchCSS?this.watchCSS():this.activate()},p.option=function(t){n.extend(this.options,t)},p.activate=function(){this.isActive||(this.isActive=!0,this.element.classList.add("flickity-enabled"),this.options.rightToLeft&&this.element.classList.add("flickity-rtl"),this.getSize(),h(this._filterFindCellElements(this.element.children),this.slider),this.viewport.appendChild(this.slider),this.element.appendChild(this.viewport),this.reloadCells(),this.options.accessibility&&(this.element.tabIndex=0,this.element.addEventListener("keydown",this)),this.emitEvent("activate"),this.selectInitialIndex(),this.isInitActivated=!0,this.dispatchEvent("ready"))},p._createSlider=function(){var t=document.createElement("div");t.className="flickity-slider",t.style[this.originSide]=0,this.slider=t},p._filterFindCellElements=function(t){return n.filterFindElements(t,this.options.cellSelector)},p.reloadCells=function(){this.cells=this._makeCells(this.slider.children),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize()},p._makeCells=function(t){return this._filterFindCellElements(t).map((function(t){return new r(t,this)}),this)},p.getLastCell=function(){return this.cells[this.cells.length-1]},p.getLastSlide=function(){return this.slides[this.slides.length-1]},p.positionCells=function(){this._sizeCells(this.cells),this._positionCells(0)},p._positionCells=function(t){t=t||0,this.maxCellHeight=t&&this.maxCellHeight||0;var e=0;if(t>0){var i=this.cells[t-1];e=i.x+i.size.outerWidth}for(var n=this.cells.length,r=t;r<n;r++){var o=this.cells[r];o.setPosition(e),e+=o.size.outerWidth,this.maxCellHeight=Math.max(o.size.outerHeight,this.maxCellHeight)}this.slideableWidth=e,this.updateSlides(),this._containSlides(),this.slidesWidth=n?this.getLastSlide().target-this.slides[0].target:0},p._sizeCells=function(t){t.forEach((function(t){t.getSize()}))},p.updateSlides=function(){if(this.slides=[],this.cells.length){var t=new o(this);this.slides.push(t);var e="left"==this.originSide?"marginRight":"marginLeft",i=this._getCanCellFit();this.cells.forEach((function(n,r){if(t.cells.length){var s=t.outerWidth-t.firstMargin+(n.size.outerWidth-n.size[e]);i.call(this,r,s)||(t.updateTarget(),t=new o(this),this.slides.push(t)),t.addCell(n)}else t.addCell(n)}),this),t.updateTarget(),this.updateSelectedSlide()}},p._getCanCellFit=function(){var t=this.options.groupCells;if(!t)return function(){return!1};if("number"==typeof t){var e=parseInt(t,10);return function(t){return t%e!=0}}var i="string"==typeof t&&t.match(/^(\d+)%$/),n=i?parseInt(i[1],10)/100:1;return function(t,e){return e<=(this.size.innerWidth+1)*n}},p._init=p.reposition=function(){this.positionCells(),this.positionSliderAtSelected()},p.getSize=function(){this.size=i(this.element),this.setCellAlign(),this.cursorPosition=this.size.innerWidth*this.cellAlign};var v={center:{left:.5,right:.5},left:{left:0,right:1},right:{right:0,left:1}};p.setCellAlign=function(){var t=v[this.options.cellAlign];this.cellAlign=t?t[this.originSide]:this.options.cellAlign},p.setGallerySize=function(){if(this.options.setGallerySize){var t=this.options.adaptiveHeight&&this.selectedSlide?this.selectedSlide.height:this.maxCellHeight;this.viewport.style.height=t+"px"}},p._getWrapShiftCells=function(){if(this.options.wrapAround){this._unshiftCells(this.beforeShiftCells),this._unshiftCells(this.afterShiftCells);var t=this.cursorPosition,e=this.cells.length-1;this.beforeShiftCells=this._getGapCells(t,e,-1),t=this.size.innerWidth-this.cursorPosition,this.afterShiftCells=this._getGapCells(t,0,1)}},p._getGapCells=function(t,e,i){for(var n=[];t>0;){var r=this.cells[e];if(!r)break;n.push(r),e+=i,t-=r.size.outerWidth}return n},p._containSlides=function(){if(this.options.contain&&!this.options.wrapAround&&this.cells.length){var t=this.options.rightToLeft,e=t?"marginRight":"marginLeft",i=t?"marginLeft":"marginRight",n=this.slideableWidth-this.getLastCell().size[i],r=n<this.size.innerWidth,o=this.cursorPosition+this.cells[0].size[e],s=n-this.size.innerWidth*(1-this.cellAlign);this.slides.forEach((function(t){r?t.target=n*this.cellAlign:(t.target=Math.max(t.target,o),t.target=Math.min(t.target,s))}),this)}},p.dispatchEvent=function(t,e,i){var n=e?[e].concat(i):i;if(this.emitEvent(t,n),a&&this.$element){var r=t+=this.options.namespaceJQueryEvents?".flickity":"";if(e){var o=a.Event(e);o.type=t,r=o}this.$element.trigger(r,i)}},p.select=function(t,e,i){if(this.isActive&&(t=parseInt(t,10),this._wrapSelect(t),(this.options.wrapAround||e)&&(t=n.modulo(t,this.slides.length)),this.slides[t])){var r=this.selectedIndex;this.selectedIndex=t,this.updateSelectedSlide(),i?this.positionSliderAtSelected():this.startAnimation(),this.options.adaptiveHeight&&this.setGallerySize(),this.dispatchEvent("select",null,[t]),t!=r&&this.dispatchEvent("change",null,[t]),this.dispatchEvent("cellSelect")}},p._wrapSelect=function(t){var e=this.slides.length;if(!(this.options.wrapAround&&e>1))return t;var i=n.modulo(t,e),r=Math.abs(i-this.selectedIndex),o=Math.abs(i+e-this.selectedIndex),s=Math.abs(i-e-this.selectedIndex);!this.isDragSelect&&o<r?t+=e:!this.isDragSelect&&s<r&&(t-=e),t<0?this.x-=this.slideableWidth:t>=e&&(this.x+=this.slideableWidth)},p.previous=function(t,e){this.select(this.selectedIndex-1,t,e)},p.next=function(t,e){this.select(this.selectedIndex+1,t,e)},p.updateSelectedSlide=function(){var t=this.slides[this.selectedIndex];t&&(this.unselectSelectedSlide(),this.selectedSlide=t,t.select(),this.selectedCells=t.cells,this.selectedElements=t.getCellElements(),this.selectedCell=t.cells[0],this.selectedElement=this.selectedElements[0])},p.unselectSelectedSlide=function(){this.selectedSlide&&this.selectedSlide.unselect()},p.selectInitialIndex=function(){var t=this.options.initialIndex;if(this.isInitActivated)this.select(this.selectedIndex,!1,!0);else{if(t&&"string"==typeof t)if(this.queryCell(t))return void this.selectCell(t,!1,!0);var e=0;t&&this.slides[t]&&(e=t),this.select(e,!1,!0)}},p.selectCell=function(t,e,i){var n=this.queryCell(t);if(n){var r=this.getCellSlideIndex(n);this.select(r,e,i)}},p.getCellSlideIndex=function(t){for(var e=0;e<this.slides.length;e++){if(-1!=this.slides[e].cells.indexOf(t))return e}},p.getCell=function(t){for(var e=0;e<this.cells.length;e++){var i=this.cells[e];if(i.element==t)return i}},p.getCells=function(t){t=n.makeArray(t);var e=[];return t.forEach((function(t){var i=this.getCell(t);i&&e.push(i)}),this),e},p.getCellElements=function(){return this.cells.map((function(t){return t.element}))},p.getParentCell=function(t){var e=this.getCell(t);return e||(t=n.getParent(t,".flickity-slider > *"),this.getCell(t))},p.getAdjacentCellElements=function(t,e){if(!t)return this.selectedSlide.getCellElements();e=void 0===e?this.selectedIndex:e;var i=this.slides.length;if(1+2*t>=i)return this.getCellElements();for(var r=[],o=e-t;o<=e+t;o++){var s=this.options.wrapAround?n.modulo(o,i):o,a=this.slides[s];a&&(r=r.concat(a.getCellElements()))}return r},p.queryCell=function(t){if("number"==typeof t)return this.cells[t];if("string"==typeof t){if(t.match(/^[#\.]?[\d\/]/))return;t=this.element.querySelector(t)}return this.getCell(t)},p.uiChange=function(){this.emitEvent("uiChange")},p.childUIPointerDown=function(t){"touchstart"!=t.type&&t.preventDefault(),this.focus()},p.onresize=function(){this.watchCSS(),this.resize()},n.debounceMethod(d,"onresize",150),p.resize=function(){if(this.isActive){this.getSize(),this.options.wrapAround&&(this.x=n.modulo(this.x,this.slideableWidth)),this.positionCells(),this._getWrapShiftCells(),this.setGallerySize(),this.emitEvent("resize");var t=this.selectedElements&&this.selectedElements[0];this.selectCell(t,!1,!0)}},p.watchCSS=function(){this.options.watchCSS&&(-1!=c(this.element,":after").content.indexOf("flickity")?this.activate():this.deactivate())},p.onkeydown=function(t){var e=document.activeElement&&document.activeElement!=this.element;if(this.options.accessibility&&!e){var i=d.keyboardHandlers[t.keyCode];i&&i.call(this)}},d.keyboardHandlers={37:function(){var t=this.options.rightToLeft?"next":"previous";this.uiChange(),this[t]()},39:function(){var t=this.options.rightToLeft?"previous":"next";this.uiChange(),this[t]()}},p.focus=function(){var e=t.pageYOffset;this.element.focus({preventScroll:!0}),t.pageYOffset!=e&&t.scrollTo(t.pageXOffset,e)},p.deactivate=function(){this.isActive&&(this.element.classList.remove("flickity-enabled"),this.element.classList.remove("flickity-rtl"),this.unselectSelectedSlide(),this.cells.forEach((function(t){t.destroy()})),this.element.removeChild(this.viewport),h(this.slider.children,this.element),this.options.accessibility&&(this.element.removeAttribute("tabIndex"),this.element.removeEventListener("keydown",this)),this.isActive=!1,this.emitEvent("deactivate"))},p.destroy=function(){this.deactivate(),t.removeEventListener("resize",this),this.allOff(),this.emitEvent("destroy"),a&&this.$element&&a.removeData(this.element,"flickity"),delete this.element.flickityGUID,delete f[this.guid]},n.extend(p,s),d.data=function(t){var e=(t=n.getQueryElement(t))&&t.flickityGUID;return e&&f[e]},n.htmlInit(d,"flickity"),a&&a.bridget&&a.bridget("flickity",d);return d.setJQuery=function(t){a=t},d.Cell=r,d.Slide=o,d}(o,t,e,i,n,r,s)}.apply(e,n))||(t.exports=r)}(window)},function(t,e,i){var n=i(20),r=i(25),o=i(40),s=i(18),a=i(52),c=[].push,l=function(t){var e=1==t,i=2==t,l=3==t,h=4==t,u=6==t,f=5==t||u;return function(d,p,v,g){for(var m,y,b=o(d),x=r(b),S=n(p,v,3),E=s(x.length),w=0,C=g||a,_=e?C(d,E):i?C(d,0):void 0;E>w;w++)if((f||w in x)&&(y=S(m=x[w],w,b),t))if(e)_[w]=y;else if(y)switch(t){case 3:return!0;case 5:return m;case 6:return w;case 2:c.call(_,m)}else if(h)return!1;return u?-1:l||h?h:_}};t.exports={forEach:l(0),map:l(1),filter:l(2),some:l(3),every:l(4),find:l(5),findIndex:l(6)}},function(t,e,i){var n=i(21);t.exports=function(t){return Object(n(t))}},function(t,e,i){var n=i(9);t.exports=Array.isArray||function(t){return"Array"==n(t)}},function(t,e,i){var n=i(3);t.exports=!!Object.getOwnPropertySymbols&&!n((function(){return!String(Symbol())}))},function(t,e,i){"use strict";var n={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!n.call({1:2},1);e.f=o?function(t){var e=r(this,t);return!!e&&e.enumerable}:n},function(t,e,i){var n=i(5),r=i(57),o=i(17),s=i(11);t.exports=function(t,e){for(var i=r(e),a=s.f,c=o.f,l=0;l<i.length;l++){var h=i[l];n(t,h)||a(t,h,c(e,h))}}},function(t,e,i){t.exports=i(0)},function(t,e,i){var n=i(5),r=i(13),o=i(58).indexOf,s=i(19);t.exports=function(t,e){var i,a=r(t),c=0,l=[];for(i in a)!n(s,i)&&n(a,i)&&l.push(i);for(;e.length>c;)n(a,i=e[c++])&&(~o(l,i)||l.push(i));return l}},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,i){var n=i(0),r=i(50),o=i(51),s=i(8);for(var a in r){var c=n[a],l=c&&c.prototype;if(l&&l.forEach!==o)try{s(l,"forEach",o)}catch(t){l.forEach=o}}},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e){t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(t,e,i){"use strict";var n=i(39).forEach,r=i(54);t.exports=r("forEach")?function(t){return n(this,t,arguments.length>1?arguments[1]:void 0)}:[].forEach},function(t,e,i){var n=i(2),r=i(41),o=i(1)("species");t.exports=function(t,e){var i;return r(t)&&("function"!=typeof(i=t.constructor)||i!==Array&&!r(i.prototype)?n(i)&&null===(i=i[o])&&(i=void 0):i=void 0),new(void 0===i?Array:i)(0===e?0:e)}},function(t,e,i){var n=i(0),r=i(16),o=n["__core-js_shared__"]||r("__core-js_shared__",{});t.exports=o},function(t,e,i){"use strict";var n=i(3);t.exports=function(t,e){var i=[][t];return!i||!n((function(){i.call(null,e||function(){throw 1},1)}))}},function(t,e,i){var n=i(0),r=i(30),o=n.WeakMap;t.exports="function"==typeof o&&/native code/.test(r.call(o))},function(t,e,i){var n=i(9),r=i(1)("toStringTag"),o="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,i,s;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(i=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),r))?i:o?n(e):"Object"==(s=n(e))&&"function"==typeof e.callee?"Arguments":s}},function(t,e,i){var n=i(12),r=i(35),o=i(47),s=i(7);t.exports=n("Reflect","ownKeys")||function(t){var e=r.f(s(t)),i=o.f;return i?e.concat(i(t)):e}},function(t,e,i){var n=i(13),r=i(18),o=i(59),s=function(t){return function(e,i,s){var a,c=n(e),l=r(c.length),h=o(s,l);if(t&&i!=i){for(;l>h;)if((a=c[h++])!=a)return!0}else for(;l>h;h++)if((t||h in c)&&c[h]===i)return t||h||0;return!t&&-1}};t.exports={includes:s(!0),indexOf:s(!1)}},function(t,e,i){var n=i(26),r=Math.max,o=Math.min;t.exports=function(t,e){var i=n(t);return i<0?r(i+e,0):o(i,e)}},function(t,e){t.exports={}},function(t,e,i){var n,r,o,s=i(0),a=i(3),c=i(9),l=i(20),h=i(68),u=i(29),f=i(62),d=s.location,p=s.setImmediate,v=s.clearImmediate,g=s.process,m=s.MessageChannel,y=s.Dispatch,b=0,x={},S=function(t){if(x.hasOwnProperty(t)){var e=x[t];delete x[t],e()}},E=function(t){return function(){S(t)}},w=function(t){S(t.data)},C=function(t){s.postMessage(t+"",d.protocol+"//"+d.host)};p&&v||(p=function(t){for(var e=[],i=1;arguments.length>i;)e.push(arguments[i++]);return x[++b]=function(){("function"==typeof t?t:Function(t)).apply(void 0,e)},n(b),b},v=function(t){delete x[t]},"process"==c(g)?n=function(t){g.nextTick(E(t))}:y&&y.now?n=function(t){y.now(E(t))}:m&&!f?(o=(r=new m).port2,r.port1.onmessage=w,n=l(o.postMessage,o,1)):!s.addEventListener||"function"!=typeof postMessage||s.importScripts||a(C)?n="onreadystatechange"in u("script")?function(t){h.appendChild(u("script")).onreadystatechange=function(){h.removeChild(this),S(t)}}:function(t){setTimeout(E(t),0)}:(n=C,s.addEventListener("message",w,!1))),t.exports={set:p,clear:v}},function(t,e,i){var n=i(63);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(n)},function(t,e,i){var n=i(12);t.exports=n("navigator","userAgent")||""},function(t,e,i){"use strict";var n=i(15),r=function(t){var e,i;this.promise=new t((function(t,n){if(void 0!==e||void 0!==i)throw TypeError("Bad Promise constructor");e=t,i=n})),this.resolve=n(e),this.reject=n(i)};t.exports.f=function(t){return new r(t)}},function(t,e,i){"use strict";function n(t){return new Date(t).toLocaleDateString("ru",{day:"numeric",month:"long"})+", "+new Date(t).getFullYear()}i.d(e,"a",(function(){return n}))},,function(t,e,i){var n=i(11).f,r=i(5),o=i(1)("toStringTag");t.exports=function(t,e,i){t&&!r(t=i?t:t.prototype,o)&&n(t,o,{configurable:!0,value:e})}},function(t,e,i){var n=i(12);t.exports=n("document","documentElement")},function(t,e,i){var n=i(14),r=i(70),o=Object.prototype;r!==o.toString&&n(o,"toString",r,{unsafe:!0})},function(t,e,i){"use strict";var n=i(56),r={};r[i(1)("toStringTag")]="z",t.exports="[object z]"!==String(r)?function(){return"[object "+n(this)+"]"}:r.toString},function(t,e,i){"use strict";var n,r,o,s,a=i(34),c=i(27),l=i(0),h=i(12),u=i(72),f=i(14),d=i(73),p=i(10),v=i(67),g=i(74),m=i(2),y=i(15),b=i(75),x=i(9),S=i(76),E=i(80),w=i(81),C=i(61).set,_=i(82),D=i(83),P=i(84),L=i(64),A=i(85),k=i(31),M=i(37),T=i(1),z=i(86),I=T("species"),O="Promise",j=k.get,F=k.set,W=k.getterFor(O),N=u,B=l.TypeError,R=l.document,H=l.process,U=p("inspectSource"),G=h("fetch"),q=L.f,X=q,V="process"==x(H),Y=!!(R&&R.createEvent&&l.dispatchEvent),Q=M(O,(function(){var t=U(N)!==String(N);if(66===z)return!0;if(!t&&!V&&"function"!=typeof PromiseRejectionEvent)return!0;if(c&&!N.prototype.finally)return!0;if(z>=51&&/native code/.test(N))return!1;var e=N.resolve(1),i=function(t){t((function(){}),(function(){}))};return(e.constructor={})[I]=i,!(e.then((function(){}))instanceof i)})),$=Q||!E((function(t){N.all(t).catch((function(){}))})),J=function(t){var e;return!(!m(t)||"function"!=typeof(e=t.then))&&e},Z=function(t,e,i){if(!e.notified){e.notified=!0;var n=e.reactions;_((function(){for(var r=e.value,o=1==e.state,s=0;n.length>s;){var a,c,l,h=n[s++],u=o?h.ok:h.fail,f=h.resolve,d=h.reject,p=h.domain;try{u?(o||(2===e.rejection&&it(t,e),e.rejection=1),!0===u?a=r:(p&&p.enter(),a=u(r),p&&(p.exit(),l=!0)),a===h.promise?d(B("Promise-chain cycle")):(c=J(a))?c.call(a,f,d):f(a)):d(r)}catch(t){p&&!l&&p.exit(),d(t)}}e.reactions=[],e.notified=!1,i&&!e.rejection&&tt(t,e)}))}},K=function(t,e,i){var n,r;Y?((n=R.createEvent("Event")).promise=e,n.reason=i,n.initEvent(t,!1,!0),l.dispatchEvent(n)):n={promise:e,reason:i},(r=l["on"+t])?r(n):"unhandledrejection"===t&&P("Unhandled promise rejection",i)},tt=function(t,e){C.call(l,(function(){var i,n=e.value;if(et(e)&&(i=A((function(){V?H.emit("unhandledRejection",n,t):K("unhandledrejection",t,n)})),e.rejection=V||et(e)?2:1,i.error))throw i.value}))},et=function(t){return 1!==t.rejection&&!t.parent},it=function(t,e){C.call(l,(function(){V?H.emit("rejectionHandled",t):K("rejectionhandled",t,e.value)}))},nt=function(t,e,i,n){return function(r){t(e,i,r,n)}},rt=function(t,e,i,n){e.done||(e.done=!0,n&&(e=n),e.value=i,e.state=2,Z(t,e,!0))},ot=function(t,e,i,n){if(!e.done){e.done=!0,n&&(e=n);try{if(t===i)throw B("Promise can't be resolved itself");var r=J(i);r?_((function(){var n={done:!1};try{r.call(i,nt(ot,t,n,e),nt(rt,t,n,e))}catch(i){rt(t,n,i,e)}})):(e.value=i,e.state=1,Z(t,e,!1))}catch(i){rt(t,{done:!1},i,e)}}};Q&&(N=function(t){b(this,N,O),y(t),n.call(this);var e=j(this);try{t(nt(ot,this,e),nt(rt,this,e))}catch(t){rt(this,e,t)}},(n=function(t){F(this,{type:O,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=d(N.prototype,{then:function(t,e){var i=W(this),n=q(w(this,N));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=V?H.domain:void 0,i.parent=!0,i.reactions.push(n),0!=i.state&&Z(this,i,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),r=function(){var t=new n,e=j(t);this.promise=t,this.resolve=nt(ot,t,e),this.reject=nt(rt,t,e)},L.f=q=function(t){return t===N||t===o?new r(t):X(t)},c||"function"!=typeof u||(s=u.prototype.then,f(u.prototype,"then",(function(t,e){var i=this;return new N((function(t,e){s.call(i,t,e)})).then(t,e)}),{unsafe:!0}),"function"==typeof G&&a({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return D(N,G.apply(l,arguments))}}))),a({global:!0,wrap:!0,forced:Q},{Promise:N}),v(N,O,!1,!0),g(O),o=h(O),a({target:O,stat:!0,forced:Q},{reject:function(t){var e=q(this);return e.reject.call(void 0,t),e.promise}}),a({target:O,stat:!0,forced:c||Q},{resolve:function(t){return D(c&&this===o?N:this,t)}}),a({target:O,stat:!0,forced:$},{all:function(t){var e=this,i=q(e),n=i.resolve,r=i.reject,o=A((function(){var i=y(e.resolve),o=[],s=0,a=1;S(t,(function(t){var c=s++,l=!1;o.push(void 0),a++,i.call(e,t).then((function(t){l||(l=!0,o[c]=t,--a||n(o))}),r)})),--a||n(o)}));return o.error&&r(o.value),i.promise},race:function(t){var e=this,i=q(e),n=i.reject,r=A((function(){var r=y(e.resolve);S(t,(function(t){r.call(e,t).then(i.resolve,n)}))}));return r.error&&n(r.value),i.promise}})},function(t,e,i){var n=i(0);t.exports=n.Promise},function(t,e,i){var n=i(14);t.exports=function(t,e,i){for(var r in e)n(t,r,e[r],i);return t}},function(t,e,i){"use strict";var n=i(12),r=i(11),o=i(1),s=i(6),a=o("species");t.exports=function(t){var e=n(t),i=r.f;s&&e&&!e[a]&&i(e,a,{configurable:!0,get:function(){return this}})}},function(t,e){t.exports=function(t,e,i){if(!(t instanceof e))throw TypeError("Incorrect "+(i?i+" ":"")+"invocation");return t}},function(t,e,i){var n=i(7),r=i(77),o=i(18),s=i(20),a=i(78),c=i(79),l=function(t,e){this.stopped=t,this.result=e};(t.exports=function(t,e,i,h,u){var f,d,p,v,g,m,y,b=s(e,i,h?2:1);if(u)f=t;else{if("function"!=typeof(d=a(t)))throw TypeError("Target is not iterable");if(r(d)){for(p=0,v=o(t.length);v>p;p++)if((g=h?b(n(y=t[p])[0],y[1]):b(t[p]))&&g instanceof l)return g;return new l(!1)}f=d.call(t)}for(m=f.next;!(y=m.call(f)).done;)if("object"==typeof(g=c(f,b,y.value,h))&&g&&g instanceof l)return g;return new l(!1)}).stop=function(t){return new l(!0,t)}},function(t,e,i){var n=i(1),r=i(60),o=n("iterator"),s=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||s[o]===t)}},function(t,e,i){var n=i(56),r=i(60),o=i(1)("iterator");t.exports=function(t){if(null!=t)return t[o]||t["@@iterator"]||r[n(t)]}},function(t,e,i){var n=i(7);t.exports=function(t,e,i,r){try{return r?e(n(i)[0],i[1]):e(i)}catch(e){var o=t.return;throw void 0!==o&&n(o.call(t)),e}}},function(t,e,i){var n=i(1)("iterator"),r=!1;try{var o=0,s={next:function(){return{done:!!o++}},return:function(){r=!0}};s[n]=function(){return this},Array.from(s,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!r)return!1;var i=!1;try{var o={};o[n]=function(){return{next:function(){return{done:i=!0}}}},t(o)}catch(t){}return i}},function(t,e,i){var n=i(7),r=i(15),o=i(1)("species");t.exports=function(t,e){var i,s=n(t).constructor;return void 0===s||null==(i=n(s)[o])?e:r(i)}},function(t,e,i){var n,r,o,s,a,c,l,h,u=i(0),f=i(17).f,d=i(9),p=i(61).set,v=i(62),g=u.MutationObserver||u.WebKitMutationObserver,m=u.process,y=u.Promise,b="process"==d(m),x=f(u,"queueMicrotask"),S=x&&x.value;S||(n=function(){var t,e;for(b&&(t=m.domain)&&t.exit();r;){e=r.fn,r=r.next;try{e()}catch(t){throw r?s():o=void 0,t}}o=void 0,t&&t.enter()},b?s=function(){m.nextTick(n)}:g&&!v?(a=!0,c=document.createTextNode(""),new g(n).observe(c,{characterData:!0}),s=function(){c.data=a=!a}):y&&y.resolve?(l=y.resolve(void 0),h=l.then,s=function(){h.call(l,n)}):s=function(){p.call(u,n)}),t.exports=S||function(t){var e={fn:t,next:void 0};o&&(o.next=e),r||(r=e,s()),o=e}},function(t,e,i){var n=i(7),r=i(2),o=i(64);t.exports=function(t,e){if(n(t),r(e)&&e.constructor===t)return e;var i=o.f(t);return(0,i.resolve)(e),i.promise}},function(t,e,i){var n=i(0);t.exports=function(t,e){var i=n.console;i&&i.error&&(1===arguments.length?i.error(t):i.error(t,e))}},function(t,e){t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},function(t,e,i){var n,r,o=i(0),s=i(63),a=o.process,c=a&&a.versions,l=c&&c.v8;l?r=(n=l.split("."))[0]+n[1]:s&&(!(n=s.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=s.match(/Chrome\/(\d+)/))&&(r=n[1]),t.exports=r&&+r},function(t,e,i){var n,r;"undefined"!=typeof window&&window,void 0===(r="function"==typeof(n=function(){"use strict";function t(){}var e=t.prototype;return e.on=function(t,e){if(t&&e){var i=this._events=this._events||{},n=i[t]=i[t]||[];return-1==n.indexOf(e)&&n.push(e),this}},e.once=function(t,e){if(t&&e){this.on(t,e);var i=this._onceEvents=this._onceEvents||{};return(i[t]=i[t]||{})[e]=!0,this}},e.off=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){var n=i.indexOf(e);return-1!=n&&i.splice(n,1),this}},e.emitEvent=function(t,e){var i=this._events&&this._events[t];if(i&&i.length){i=i.slice(0),e=e||[];for(var n=this._onceEvents&&this._onceEvents[t],r=0;r<i.length;r++){var o=i[r];n&&n[o]&&(this.off(t,o),delete n[o]),o.apply(this,e)}return this}},e.allOff=function(){delete this._events,delete this._onceEvents},t})?n.call(e,i,e,t):n)||(t.exports=r)},function(t,e,i){var n,r;
/*!
 * Unipointer v2.3.0
 * base class for doing one thing with pointer event
 * MIT license
 */!function(o,s){n=[i(87)],void 0===(r=function(t){return function(t,e){"use strict";function i(){}var n=i.prototype=Object.create(e.prototype);n.bindStartEvent=function(t){this._bindStartEvent(t,!0)},n.unbindStartEvent=function(t){this._bindStartEvent(t,!1)},n._bindStartEvent=function(e,i){var n=(i=void 0===i||i)?"addEventListener":"removeEventListener",r="mousedown";t.PointerEvent?r="pointerdown":"ontouchstart"in t&&(r="touchstart"),e[n](r,this)},n.handleEvent=function(t){var e="on"+t.type;this[e]&&this[e](t)},n.getTouch=function(t){for(var e=0;e<t.length;e++){var i=t[e];if(i.identifier==this.pointerIdentifier)return i}},n.onmousedown=function(t){var e=t.button;e&&0!==e&&1!==e||this._pointerDown(t,t)},n.ontouchstart=function(t){this._pointerDown(t,t.changedTouches[0])},n.onpointerdown=function(t){this._pointerDown(t,t)},n._pointerDown=function(t,e){t.button||this.isPointerDown||(this.isPointerDown=!0,this.pointerIdentifier=void 0!==e.pointerId?e.pointerId:e.identifier,this.pointerDown(t,e))},n.pointerDown=function(t,e){this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e])};var r={mousedown:["mousemove","mouseup"],touchstart:["touchmove","touchend","touchcancel"],pointerdown:["pointermove","pointerup","pointercancel"]};return n._bindPostStartEvents=function(e){if(e){var i=r[e.type];i.forEach((function(e){t.addEventListener(e,this)}),this),this._boundPointerEvents=i}},n._unbindPostStartEvents=function(){this._boundPointerEvents&&(this._boundPointerEvents.forEach((function(e){t.removeEventListener(e,this)}),this),delete this._boundPointerEvents)},n.onmousemove=function(t){this._pointerMove(t,t)},n.onpointermove=function(t){t.pointerId==this.pointerIdentifier&&this._pointerMove(t,t)},n.ontouchmove=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerMove(t,e)},n._pointerMove=function(t,e){this.pointerMove(t,e)},n.pointerMove=function(t,e){this.emitEvent("pointerMove",[t,e])},n.onmouseup=function(t){this._pointerUp(t,t)},n.onpointerup=function(t){t.pointerId==this.pointerIdentifier&&this._pointerUp(t,t)},n.ontouchend=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerUp(t,e)},n._pointerUp=function(t,e){this._pointerDone(),this.pointerUp(t,e)},n.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e])},n._pointerDone=function(){this._pointerReset(),this._unbindPostStartEvents(),this.pointerDone()},n._pointerReset=function(){this.isPointerDown=!1,delete this.pointerIdentifier},n.pointerDone=function(){},n.onpointercancel=function(t){t.pointerId==this.pointerIdentifier&&this._pointerCancel(t,t)},n.ontouchcancel=function(t){var e=this.getTouch(t.changedTouches);e&&this._pointerCancel(t,e)},n._pointerCancel=function(t,e){this._pointerDone(),this.pointerCancel(t,e)},n.pointerCancel=function(t,e){this.emitEvent("pointerCancel",[t,e])},i.getPointerPoint=function(t){return{x:t.pageX,y:t.pageY}},i}(o,t)}.apply(e,n))||(t.exports=r)}(window)},,,function(t,e,i){var n,r;
/*!
 * getSize v2.0.3
 * measure size of elements
 * MIT license
 */window,void 0===(r="function"==typeof(n=function(){"use strict";function t(t){var e=parseFloat(t);return-1==t.indexOf("%")&&!isNaN(e)&&e}var e="undefined"==typeof console?function(){}:function(t){console.error(t)},i=["paddingLeft","paddingRight","paddingTop","paddingBottom","marginLeft","marginRight","marginTop","marginBottom","borderLeftWidth","borderRightWidth","borderTopWidth","borderBottomWidth"],n=i.length;function r(t){var i=getComputedStyle(t);return i||e("Style returned "+i+". Are you running this code in a hidden iframe on Firefox? See https://bit.ly/getsizebug1"),i}var o,s=!1;function a(e){if(function(){if(!s){s=!0;var e=document.createElement("div");e.style.width="200px",e.style.padding="1px 2px 3px 4px",e.style.borderStyle="solid",e.style.borderWidth="1px 2px 3px 4px",e.style.boxSizing="border-box";var i=document.body||document.documentElement;i.appendChild(e);var n=r(e);o=200==Math.round(t(n.width)),a.isBoxSizeOuter=o,i.removeChild(e)}}(),"string"==typeof e&&(e=document.querySelector(e)),e&&"object"==typeof e&&e.nodeType){var c=r(e);if("none"==c.display)return function(){for(var t={width:0,height:0,innerWidth:0,innerHeight:0,outerWidth:0,outerHeight:0},e=0;e<n;e++)t[i[e]]=0;return t}();var l={};l.width=e.offsetWidth,l.height=e.offsetHeight;for(var h=l.isBorderBox="border-box"==c.boxSizing,u=0;u<n;u++){var f=i[u],d=c[f],p=parseFloat(d);l[f]=isNaN(p)?0:p}var v=l.paddingLeft+l.paddingRight,g=l.paddingTop+l.paddingBottom,m=l.marginLeft+l.marginRight,y=l.marginTop+l.marginBottom,b=l.borderLeftWidth+l.borderRightWidth,x=l.borderTopWidth+l.borderBottomWidth,S=h&&o,E=t(c.width);!1!==E&&(l.width=E+(S?0:v+b));var w=t(c.height);return!1!==w&&(l.height=w+(S?0:g+x)),l.innerWidth=l.width-(v+b),l.innerHeight=l.height-(g+x),l.outerWidth=l.width+m,l.outerHeight=l.height+y,l}}return a})?n.call(e,i,e,t):n)||(t.exports=r)},function(t,e,i){var n,r,o;
/*!
 * Flickity v2.2.1
 * Touch, responsive, flickable carousels
 *
 * Licensed GPLv3 for open source use
 * or Flickity Commercial License for commercial use
 *
 * https://flickity.metafizzy.co
 * Copyright 2015-2019 Metafizzy
 */window,r=[i(38),i(105),i(107),i(108),i(109),i(110),i(111)],void 0===(o="function"==typeof(n=function(t){return t})?n.apply(e,r):n)||(t.exports=o)},,,,,,,,function(t,e,i){},function(t,e,i){var n,r;!function(o,s){"use strict";void 0===(r="function"==typeof(n=s)?n.call(e,i,e,t):n)||(t.exports=r)}(window,(function(){"use strict";var t=function(){var t=window.Element.prototype;if(t.matches)return"matches";if(t.matchesSelector)return"matchesSelector";for(var e=["webkit","moz","ms","o"],i=0;i<e.length;i++){var n=e[i]+"MatchesSelector";if(t[n])return n}}();return function(e,i){return e[t](i)}}))},function(t,e,i){var n,r;window,n=[i(91)],void 0===(r=function(t){return function(t,e){"use strict";function i(t,e){this.element=t,this.parent=e,this.create()}var n=i.prototype;return n.create=function(){this.element.style.position="absolute",this.element.setAttribute("aria-hidden","true"),this.x=0,this.shift=0},n.destroy=function(){this.unselect(),this.element.style.position="";var t=this.parent.originSide;this.element.style[t]=""},n.getSize=function(){this.size=e(this.element)},n.setPosition=function(t){this.x=t,this.updateTarget(),this.renderPosition(t)},n.updateTarget=n.setDefaultTarget=function(){var t="left"==this.parent.originSide?"marginLeft":"marginRight";this.target=this.x+this.size[t]+this.size.width*this.parent.cellAlign},n.renderPosition=function(t){var e=this.parent.originSide;this.element.style[e]=this.parent.getPositionValue(t)},n.select=function(){this.element.classList.add("is-selected"),this.element.removeAttribute("aria-hidden")},n.unselect=function(){this.element.classList.remove("is-selected"),this.element.setAttribute("aria-hidden","true")},n.wrapShift=function(t){this.shift=t,this.renderPosition(this.x+this.parent.slideableWidth*t)},n.remove=function(){this.element.parentNode.removeChild(this.element)},i}(0,t)}.apply(e,n))||(t.exports=r)},function(t,e,i){var n,r;window,void 0===(r="function"==typeof(n=function(){"use strict";function t(t){this.parent=t,this.isOriginLeft="left"==t.originSide,this.cells=[],this.outerWidth=0,this.height=0}var e=t.prototype;return e.addCell=function(t){if(this.cells.push(t),this.outerWidth+=t.size.outerWidth,this.height=Math.max(t.size.outerHeight,this.height),1==this.cells.length){this.x=t.x;var e=this.isOriginLeft?"marginLeft":"marginRight";this.firstMargin=t.size[e]}},e.updateTarget=function(){var t=this.isOriginLeft?"marginRight":"marginLeft",e=this.getLastCell(),i=e?e.size[t]:0,n=this.outerWidth-(this.firstMargin+i);this.target=this.x+this.firstMargin+n*this.parent.cellAlign},e.getLastCell=function(){return this.cells[this.cells.length-1]},e.select=function(){this.cells.forEach((function(t){t.select()}))},e.unselect=function(){this.cells.forEach((function(t){t.unselect()}))},e.getCellElements=function(){return this.cells.map((function(t){return t.element}))},t})?n.call(e,i,e,t):n)||(t.exports=r)},function(t,e,i){var n,r;window,n=[i(32)],void 0===(r=function(t){return function(t,e){"use strict";var i={startAnimation:function(){this.isAnimating||(this.isAnimating=!0,this.restingFrames=0,this.animate())},animate:function(){this.applyDragForce(),this.applySelectedAttraction();var t=this.x;if(this.integratePhysics(),this.positionSlider(),this.settle(t),this.isAnimating){var e=this;requestAnimationFrame((function(){e.animate()}))}},positionSlider:function(){var t=this.x;this.options.wrapAround&&this.cells.length>1&&(t=e.modulo(t,this.slideableWidth),t-=this.slideableWidth,this.shiftWrapCells(t)),this.setTranslateX(t,this.isAnimating),this.dispatchScrollEvent()},setTranslateX:function(t,e){t+=this.cursorPosition,t=this.options.rightToLeft?-t:t;var i=this.getPositionValue(t);this.slider.style.transform=e?"translate3d("+i+",0,0)":"translateX("+i+")"},dispatchScrollEvent:function(){var t=this.slides[0];if(t){var e=-this.x-t.target,i=e/this.slidesWidth;this.dispatchEvent("scroll",null,[i,e])}},positionSliderAtSelected:function(){this.cells.length&&(this.x=-this.selectedSlide.target,this.velocity=0,this.positionSlider())},getPositionValue:function(t){return this.options.percentPosition?.01*Math.round(t/this.size.innerWidth*1e4)+"%":Math.round(t)+"px"},settle:function(t){this.isPointerDown||Math.round(100*this.x)!=Math.round(100*t)||this.restingFrames++,this.restingFrames>2&&(this.isAnimating=!1,delete this.isFreeScrolling,this.positionSlider(),this.dispatchEvent("settle",null,[this.selectedIndex]))},shiftWrapCells:function(t){var e=this.cursorPosition+t;this._shiftCells(this.beforeShiftCells,e,-1);var i=this.size.innerWidth-(t+this.slideableWidth+this.cursorPosition);this._shiftCells(this.afterShiftCells,i,1)},_shiftCells:function(t,e,i){for(var n=0;n<t.length;n++){var r=t[n],o=e>0?i:0;r.wrapShift(o),e-=r.size.outerWidth}},_unshiftCells:function(t){if(t&&t.length)for(var e=0;e<t.length;e++)t[e].wrapShift(0)},integratePhysics:function(){this.x+=this.velocity,this.velocity*=this.getFrictionFactor()},applyForce:function(t){this.velocity+=t},getFrictionFactor:function(){return 1-this.options[this.isFreeScrolling?"freeScrollFriction":"friction"]},getRestingPosition:function(){return this.x+this.velocity/(1-this.getFrictionFactor())},applyDragForce:function(){if(this.isDraggable&&this.isPointerDown){var t=this.dragX-this.x-this.velocity;this.applyForce(t)}},applySelectedAttraction:function(){if((!this.isDraggable||!this.isPointerDown)&&!this.isFreeScrolling&&this.slides.length){var t=(-1*this.selectedSlide.target-this.x)*this.options.selectedAttraction;this.applyForce(t)}}};return i}(0,t)}.apply(e,n))||(t.exports=r)},function(t,e,i){var n,r;!function(o,s){n=[i(38),i(106),i(32)],void 0===(r=function(t,e,i){return function(t,e,i,n){"use strict";n.extend(e.defaults,{draggable:">1",dragThreshold:3}),e.createMethods.push("_createDrag");var r=e.prototype;n.extend(r,i.prototype),r._touchActionValue="pan-y";var o="createTouch"in document,s=!1;r._createDrag=function(){this.on("activate",this.onActivateDrag),this.on("uiChange",this._uiChangeDrag),this.on("deactivate",this.onDeactivateDrag),this.on("cellChange",this.updateDraggable),o&&!s&&(t.addEventListener("touchmove",(function(){})),s=!0)},r.onActivateDrag=function(){this.handles=[this.viewport],this.bindHandles(),this.updateDraggable()},r.onDeactivateDrag=function(){this.unbindHandles(),this.element.classList.remove("is-draggable")},r.updateDraggable=function(){">1"==this.options.draggable?this.isDraggable=this.slides.length>1:this.isDraggable=this.options.draggable,this.isDraggable?this.element.classList.add("is-draggable"):this.element.classList.remove("is-draggable")},r.bindDrag=function(){this.options.draggable=!0,this.updateDraggable()},r.unbindDrag=function(){this.options.draggable=!1,this.updateDraggable()},r._uiChangeDrag=function(){delete this.isFreeScrolling},r.pointerDown=function(e,i){this.isDraggable?this.okayPointerDown(e)&&(this._pointerDownPreventDefault(e),this.pointerDownFocus(e),document.activeElement!=this.element&&this.pointerDownBlur(),this.dragX=this.x,this.viewport.classList.add("is-pointer-down"),this.pointerDownScroll=c(),t.addEventListener("scroll",this),this._pointerDownDefault(e,i)):this._pointerDownDefault(e,i)},r._pointerDownDefault=function(t,e){this.pointerDownPointer={pageX:e.pageX,pageY:e.pageY},this._bindPostStartEvents(t),this.dispatchEvent("pointerDown",t,[e])};var a={INPUT:!0,TEXTAREA:!0,SELECT:!0};function c(){return{x:t.pageXOffset,y:t.pageYOffset}}return r.pointerDownFocus=function(t){a[t.target.nodeName]||this.focus()},r._pointerDownPreventDefault=function(t){var e="touchstart"==t.type,i="touch"==t.pointerType,n=a[t.target.nodeName];e||i||n||t.preventDefault()},r.hasDragStarted=function(t){return Math.abs(t.x)>this.options.dragThreshold},r.pointerUp=function(t,e){delete this.isTouchScrolling,this.viewport.classList.remove("is-pointer-down"),this.dispatchEvent("pointerUp",t,[e]),this._dragPointerUp(t,e)},r.pointerDone=function(){t.removeEventListener("scroll",this),delete this.pointerDownScroll},r.dragStart=function(e,i){this.isDraggable&&(this.dragStartPosition=this.x,this.startAnimation(),t.removeEventListener("scroll",this),this.dispatchEvent("dragStart",e,[i]))},r.pointerMove=function(t,e){var i=this._dragPointerMove(t,e);this.dispatchEvent("pointerMove",t,[e,i]),this._dragMove(t,e,i)},r.dragMove=function(t,e,i){if(this.isDraggable){t.preventDefault(),this.previousDragX=this.dragX;var n=this.options.rightToLeft?-1:1;this.options.wrapAround&&(i.x=i.x%this.slideableWidth);var r=this.dragStartPosition+i.x*n;if(!this.options.wrapAround&&this.slides.length){var o=Math.max(-this.slides[0].target,this.dragStartPosition);r=r>o?.5*(r+o):r;var s=Math.min(-this.getLastSlide().target,this.dragStartPosition);r=r<s?.5*(r+s):r}this.dragX=r,this.dragMoveTime=new Date,this.dispatchEvent("dragMove",t,[e,i])}},r.dragEnd=function(t,e){if(this.isDraggable){this.options.freeScroll&&(this.isFreeScrolling=!0);var i=this.dragEndRestingSelect();if(this.options.freeScroll&&!this.options.wrapAround){var n=this.getRestingPosition();this.isFreeScrolling=-n>this.slides[0].target&&-n<this.getLastSlide().target}else this.options.freeScroll||i!=this.selectedIndex||(i+=this.dragEndBoostSelect());delete this.previousDragX,this.isDragSelect=this.options.wrapAround,this.select(i),delete this.isDragSelect,this.dispatchEvent("dragEnd",t,[e])}},r.dragEndRestingSelect=function(){var t=this.getRestingPosition(),e=Math.abs(this.getSlideDistance(-t,this.selectedIndex)),i=this._getClosestResting(t,e,1),n=this._getClosestResting(t,e,-1);return i.distance<n.distance?i.index:n.index},r._getClosestResting=function(t,e,i){for(var n=this.selectedIndex,r=1/0,o=this.options.contain&&!this.options.wrapAround?function(t,e){return t<=e}:function(t,e){return t<e};o(e,r)&&(n+=i,r=e,null!==(e=this.getSlideDistance(-t,n)));)e=Math.abs(e);return{distance:r,index:n-i}},r.getSlideDistance=function(t,e){var i=this.slides.length,r=this.options.wrapAround&&i>1,o=r?n.modulo(e,i):e,s=this.slides[o];if(!s)return null;var a=r?this.slideableWidth*Math.floor(e/i):0;return t-(s.target+a)},r.dragEndBoostSelect=function(){if(void 0===this.previousDragX||!this.dragMoveTime||new Date-this.dragMoveTime>100)return 0;var t=this.getSlideDistance(-this.dragX,this.selectedIndex),e=this.previousDragX-this.dragX;return t>0&&e>0?1:t<0&&e<0?-1:0},r.staticClick=function(t,e){var i=this.getParentCell(t.target),n=i&&i.element,r=i&&this.cells.indexOf(i);this.dispatchEvent("staticClick",t,[e,n,r])},r.onscroll=function(){var t=c(),e=this.pointerDownScroll.x-t.x,i=this.pointerDownScroll.y-t.y;(Math.abs(e)>3||Math.abs(i)>3)&&this._pointerDone()},e}(o,t,e,i)}.apply(e,n))||(t.exports=r)}(window)},function(t,e,i){var n,r;
/*!
 * Unidragger v2.3.1
 * Draggable base class
 * MIT license
 */!function(o,s){n=[i(88)],void 0===(r=function(t){return function(t,e){"use strict";function i(){}var n=i.prototype=Object.create(e.prototype);n.bindHandles=function(){this._bindHandles(!0)},n.unbindHandles=function(){this._bindHandles(!1)},n._bindHandles=function(e){for(var i=(e=void 0===e||e)?"addEventListener":"removeEventListener",n=e?this._touchActionValue:"",r=0;r<this.handles.length;r++){var o=this.handles[r];this._bindStartEvent(o,e),o[i]("click",this),t.PointerEvent&&(o.style.touchAction=n)}},n._touchActionValue="none",n.pointerDown=function(t,e){this.okayPointerDown(t)&&(this.pointerDownPointer={pageX:e.pageX,pageY:e.pageY},t.preventDefault(),this.pointerDownBlur(),this._bindPostStartEvents(t),this.emitEvent("pointerDown",[t,e]))};var r={TEXTAREA:!0,INPUT:!0,SELECT:!0,OPTION:!0},o={radio:!0,checkbox:!0,button:!0,submit:!0,image:!0,file:!0};return n.okayPointerDown=function(t){var e=r[t.target.nodeName],i=o[t.target.type],n=!e||i;return n||this._pointerReset(),n},n.pointerDownBlur=function(){var t=document.activeElement;t&&t.blur&&t!=document.body&&t.blur()},n.pointerMove=function(t,e){var i=this._dragPointerMove(t,e);this.emitEvent("pointerMove",[t,e,i]),this._dragMove(t,e,i)},n._dragPointerMove=function(t,e){var i={x:e.pageX-this.pointerDownPointer.pageX,y:e.pageY-this.pointerDownPointer.pageY};return!this.isDragging&&this.hasDragStarted(i)&&this._dragStart(t,e),i},n.hasDragStarted=function(t){return Math.abs(t.x)>3||Math.abs(t.y)>3},n.pointerUp=function(t,e){this.emitEvent("pointerUp",[t,e]),this._dragPointerUp(t,e)},n._dragPointerUp=function(t,e){this.isDragging?this._dragEnd(t,e):this._staticClick(t,e)},n._dragStart=function(t,e){this.isDragging=!0,this.isPreventingClicks=!0,this.dragStart(t,e)},n.dragStart=function(t,e){this.emitEvent("dragStart",[t,e])},n._dragMove=function(t,e,i){this.isDragging&&this.dragMove(t,e,i)},n.dragMove=function(t,e,i){t.preventDefault(),this.emitEvent("dragMove",[t,e,i])},n._dragEnd=function(t,e){this.isDragging=!1,setTimeout(function(){delete this.isPreventingClicks}.bind(this)),this.dragEnd(t,e)},n.dragEnd=function(t,e){this.emitEvent("dragEnd",[t,e])},n.onclick=function(t){this.isPreventingClicks&&t.preventDefault()},n._staticClick=function(t,e){this.isIgnoringMouseUp&&"mouseup"==t.type||(this.staticClick(t,e),"mouseup"!=t.type&&(this.isIgnoringMouseUp=!0,setTimeout(function(){delete this.isIgnoringMouseUp}.bind(this),400)))},n.staticClick=function(t,e){this.emitEvent("staticClick",[t,e])},i.getPointerPoint=e.getPointerPoint,i}(o,t)}.apply(e,n))||(t.exports=r)}(window)},function(t,e,i){var n,r;window,n=[i(38),i(88),i(32)],void 0===(r=function(t,e,i){return function(t,e,i,n){"use strict";var r="http://www.w3.org/2000/svg";function o(t,e){this.direction=t,this.parent=e,this._create()}o.prototype=Object.create(i.prototype),o.prototype._create=function(){this.isEnabled=!0,this.isPrevious=-1==this.direction;var t=this.parent.options.rightToLeft?1:-1;this.isLeft=this.direction==t;var e=this.element=document.createElement("button");e.className="flickity-button flickity-prev-next-button",e.className+=this.isPrevious?" previous":" next",e.setAttribute("type","button"),this.disable(),e.setAttribute("aria-label",this.isPrevious?"Previous":"Next");var i=this.createSVG();e.appendChild(i),this.parent.on("select",this.update.bind(this)),this.on("pointerDown",this.parent.childUIPointerDown.bind(this.parent))},o.prototype.activate=function(){this.bindStartEvent(this.element),this.element.addEventListener("click",this),this.parent.element.appendChild(this.element)},o.prototype.deactivate=function(){this.parent.element.removeChild(this.element),this.unbindStartEvent(this.element),this.element.removeEventListener("click",this)},o.prototype.createSVG=function(){var t=document.createElementNS(r,"svg");t.setAttribute("class","flickity-button-icon"),t.setAttribute("viewBox","0 0 100 100");var e,i=document.createElementNS(r,"path"),n="string"==typeof(e=this.parent.options.arrowShape)?e:"M "+e.x0+",50 L "+e.x1+","+(e.y1+50)+" L "+e.x2+","+(e.y2+50)+" L "+e.x3+",50  L "+e.x2+","+(50-e.y2)+" L "+e.x1+","+(50-e.y1)+" Z";return i.setAttribute("d",n),i.setAttribute("class","arrow"),this.isLeft||i.setAttribute("transform","translate(100, 100) rotate(180) "),t.appendChild(i),t},o.prototype.handleEvent=n.handleEvent,o.prototype.onclick=function(){if(this.isEnabled){this.parent.uiChange();var t=this.isPrevious?"previous":"next";this.parent[t]()}},o.prototype.enable=function(){this.isEnabled||(this.element.disabled=!1,this.isEnabled=!0)},o.prototype.disable=function(){this.isEnabled&&(this.element.disabled=!0,this.isEnabled=!1)},o.prototype.update=function(){var t=this.parent.slides;if(this.parent.options.wrapAround&&t.length>1)this.enable();else{var e=t.length?t.length-1:0,i=this.isPrevious?0:e;this[this.parent.selectedIndex==i?"disable":"enable"]()}},o.prototype.destroy=function(){this.deactivate(),this.allOff()},n.extend(e.defaults,{prevNextButtons:!0,arrowShape:{x0:10,x1:60,y1:50,x2:70,y2:40,x3:30}}),e.createMethods.push("_createPrevNextButtons");var s=e.prototype;return s._createPrevNextButtons=function(){this.options.prevNextButtons&&(this.prevButton=new o(-1,this),this.nextButton=new o(1,this),this.on("activate",this.activatePrevNextButtons))},s.activatePrevNextButtons=function(){this.prevButton.activate(),this.nextButton.activate(),this.on("deactivate",this.deactivatePrevNextButtons)},s.deactivatePrevNextButtons=function(){this.prevButton.deactivate(),this.nextButton.deactivate(),this.off("deactivate",this.deactivatePrevNextButtons)},e.PrevNextButton=o,e}(0,t,e,i)}.apply(e,n))||(t.exports=r)},function(t,e,i){var n,r;window,n=[i(38),i(88),i(32)],void 0===(r=function(t,e,i){return function(t,e,i,n){"use strict";function r(t){this.parent=t,this._create()}r.prototype=Object.create(i.prototype),r.prototype._create=function(){this.holder=document.createElement("ol"),this.holder.className="flickity-page-dots",this.dots=[],this.handleClick=this.onClick.bind(this),this.on("pointerDown",this.parent.childUIPointerDown.bind(this.parent))},r.prototype.activate=function(){this.setDots(),this.holder.addEventListener("click",this.handleClick),this.bindStartEvent(this.holder),this.parent.element.appendChild(this.holder)},r.prototype.deactivate=function(){this.holder.removeEventListener("click",this.handleClick),this.unbindStartEvent(this.holder),this.parent.element.removeChild(this.holder)},r.prototype.setDots=function(){var t=this.parent.slides.length-this.dots.length;t>0?this.addDots(t):t<0&&this.removeDots(-t)},r.prototype.addDots=function(t){for(var e=document.createDocumentFragment(),i=[],n=this.dots.length,r=n+t,o=n;o<r;o++){var s=document.createElement("li");s.className="dot",s.setAttribute("aria-label","Page dot "+(o+1)),e.appendChild(s),i.push(s)}this.holder.appendChild(e),this.dots=this.dots.concat(i)},r.prototype.removeDots=function(t){this.dots.splice(this.dots.length-t,t).forEach((function(t){this.holder.removeChild(t)}),this)},r.prototype.updateSelected=function(){this.selectedDot&&(this.selectedDot.className="dot",this.selectedDot.removeAttribute("aria-current")),this.dots.length&&(this.selectedDot=this.dots[this.parent.selectedIndex],this.selectedDot.className="dot is-selected",this.selectedDot.setAttribute("aria-current","step"))},r.prototype.onTap=r.prototype.onClick=function(t){var e=t.target;if("LI"==e.nodeName){this.parent.uiChange();var i=this.dots.indexOf(e);this.parent.select(i)}},r.prototype.destroy=function(){this.deactivate(),this.allOff()},e.PageDots=r,n.extend(e.defaults,{pageDots:!0}),e.createMethods.push("_createPageDots");var o=e.prototype;return o._createPageDots=function(){this.options.pageDots&&(this.pageDots=new r(this),this.on("activate",this.activatePageDots),this.on("select",this.updateSelectedPageDots),this.on("cellChange",this.updatePageDots),this.on("resize",this.updatePageDots),this.on("deactivate",this.deactivatePageDots))},o.activatePageDots=function(){this.pageDots.activate()},o.updateSelectedPageDots=function(){this.pageDots.updateSelected()},o.updatePageDots=function(){this.pageDots.setDots()},o.deactivatePageDots=function(){this.pageDots.deactivate()},e.PageDots=r,e}(0,t,e,i)}.apply(e,n))||(t.exports=r)},function(t,e,i){var n,r;window,n=[i(87),i(32),i(38)],void 0===(r=function(t,e,i){return function(t,e,i){"use strict";function n(t){this.parent=t,this.state="stopped",this.onVisibilityChange=this.visibilityChange.bind(this),this.onVisibilityPlay=this.visibilityPlay.bind(this)}n.prototype=Object.create(t.prototype),n.prototype.play=function(){"playing"!=this.state&&(document.hidden?document.addEventListener("visibilitychange",this.onVisibilityPlay):(this.state="playing",document.addEventListener("visibilitychange",this.onVisibilityChange),this.tick()))},n.prototype.tick=function(){if("playing"==this.state){var t=this.parent.options.autoPlay;t="number"==typeof t?t:3e3;var e=this;this.clear(),this.timeout=setTimeout((function(){e.parent.next(!0),e.tick()}),t)}},n.prototype.stop=function(){this.state="stopped",this.clear(),document.removeEventListener("visibilitychange",this.onVisibilityChange)},n.prototype.clear=function(){clearTimeout(this.timeout)},n.prototype.pause=function(){"playing"==this.state&&(this.state="paused",this.clear())},n.prototype.unpause=function(){"paused"==this.state&&this.play()},n.prototype.visibilityChange=function(){this[document.hidden?"pause":"unpause"]()},n.prototype.visibilityPlay=function(){this.play(),document.removeEventListener("visibilitychange",this.onVisibilityPlay)},e.extend(i.defaults,{pauseAutoPlayOnHover:!0}),i.createMethods.push("_createPlayer");var r=i.prototype;return r._createPlayer=function(){this.player=new n(this),this.on("activate",this.activatePlayer),this.on("uiChange",this.stopPlayer),this.on("pointerDown",this.stopPlayer),this.on("deactivate",this.deactivatePlayer)},r.activatePlayer=function(){this.options.autoPlay&&(this.player.play(),this.element.addEventListener("mouseenter",this))},r.playPlayer=function(){this.player.play()},r.stopPlayer=function(){this.player.stop()},r.pausePlayer=function(){this.player.pause()},r.unpausePlayer=function(){this.player.unpause()},r.deactivatePlayer=function(){this.player.stop(),this.element.removeEventListener("mouseenter",this)},r.onmouseenter=function(){this.options.pauseAutoPlayOnHover&&(this.player.pause(),this.element.addEventListener("mouseleave",this))},r.onmouseleave=function(){this.player.unpause(),this.element.removeEventListener("mouseleave",this)},i.Player=n,i}(t,e,i)}.apply(e,n))||(t.exports=r)},function(t,e,i){var n,r;window,n=[i(38),i(32)],void 0===(r=function(t,e){return function(t,e,i){"use strict";var n=e.prototype;return n.insert=function(t,e){var i=this._makeCells(t);if(i&&i.length){var n=this.cells.length;e=void 0===e?n:e;var r=function(t){var e=document.createDocumentFragment();return t.forEach((function(t){e.appendChild(t.element)})),e}(i),o=e==n;if(o)this.slider.appendChild(r);else{var s=this.cells[e].element;this.slider.insertBefore(r,s)}if(0===e)this.cells=i.concat(this.cells);else if(o)this.cells=this.cells.concat(i);else{var a=this.cells.splice(e,n-e);this.cells=this.cells.concat(i).concat(a)}this._sizeCells(i),this.cellChange(e,!0)}},n.append=function(t){this.insert(t,this.cells.length)},n.prepend=function(t){this.insert(t,0)},n.remove=function(t){var e=this.getCells(t);if(e&&e.length){var n=this.cells.length-1;e.forEach((function(t){t.remove();var e=this.cells.indexOf(t);n=Math.min(e,n),i.removeFrom(this.cells,t)}),this),this.cellChange(n,!0)}},n.cellSizeChange=function(t){var e=this.getCell(t);if(e){e.getSize();var i=this.cells.indexOf(e);this.cellChange(i)}},n.cellChange=function(t,e){var i=this.selectedElement;this._positionCells(t),this._getWrapShiftCells(),this.setGallerySize();var n=this.getCell(i);n&&(this.selectedIndex=this.getCellSlideIndex(n)),this.selectedIndex=Math.min(this.slides.length-1,this.selectedIndex),this.emitEvent("cellChange",[t]),this.select(this.selectedIndex),e&&this.positionSliderAtSelected()},e}(0,t,e)}.apply(e,n))||(t.exports=r)},function(t,e,i){var n,r;window,n=[i(38),i(32)],void 0===(r=function(t,e){return function(t,e,i){"use strict";e.createMethods.push("_createLazyload");var n=e.prototype;function r(t,e){this.img=t,this.flickity=e,this.load()}return n._createLazyload=function(){this.on("select",this.lazyLoad)},n.lazyLoad=function(){var t=this.options.lazyLoad;if(t){var e="number"==typeof t?t:0,n=this.getAdjacentCellElements(e),o=[];n.forEach((function(t){var e=function(t){if("IMG"==t.nodeName){var e=t.getAttribute("data-flickity-lazyload"),n=t.getAttribute("data-flickity-lazyload-src"),r=t.getAttribute("data-flickity-lazyload-srcset");if(e||n||r)return[t]}var o=t.querySelectorAll("img[data-flickity-lazyload], img[data-flickity-lazyload-src], img[data-flickity-lazyload-srcset]");return i.makeArray(o)}(t);o=o.concat(e)})),o.forEach((function(t){new r(t,this)}),this)}},r.prototype.handleEvent=i.handleEvent,r.prototype.load=function(){this.img.addEventListener("load",this),this.img.addEventListener("error",this);var t=this.img.getAttribute("data-flickity-lazyload")||this.img.getAttribute("data-flickity-lazyload-src"),e=this.img.getAttribute("data-flickity-lazyload-srcset");this.img.src=t,e&&this.img.setAttribute("srcset",e),this.img.removeAttribute("data-flickity-lazyload"),this.img.removeAttribute("data-flickity-lazyload-src"),this.img.removeAttribute("data-flickity-lazyload-srcset")},r.prototype.onload=function(t){this.complete(t,"flickity-lazyloaded")},r.prototype.onerror=function(t){this.complete(t,"flickity-lazyerror")},r.prototype.complete=function(t,e){this.img.removeEventListener("load",this),this.img.removeEventListener("error",this);var i=this.flickity.getParentCell(this.img),n=i&&i.element;this.flickity.cellSizeChange(n),this.img.classList.add(e),this.flickity.dispatchEvent("lazyLoad",t,n)},e.LazyLoader=r,e}(0,t,e)}.apply(e,n))||(t.exports=r)},,,,,,,,function(t,e,i){"use strict";i.r(e);i(48),i(100);var n=i(92),r=i.n(n);i(69),i(71);var o=i(65);var s=i(4),a=new r.a(".carousel",{cellAlign:"center",wrapAround:!0,groupCells:"90%"}),c=new class{constructor(t){this.url=t}getCommits(){return fetch("".concat(this.url),{method:"GET",headers:{"Content-Type":"application/json"}}).then(t=>this.responce(t)).catch(t=>{throw t})}responce(t){return t.ok?t.json():Promise.reject("Что-то пошло не так: ".concat(t.status))}}(s.m),l=new class{constructor(t){this.card=t}renderCommitCard(t){this.card.append(t)}}(a),h=new class{constructor(){}createCardCommit(t){var e=document.createElement("a");e.classList.add("carousel__cell","link");var i=document.createElement("time");i.classList.add("carousel__date");var n=document.createElement("div");n.classList.add("carousel__info");var r=document.createElement("img");r.classList.add("carousel__avatar");var s=document.createElement("div");s.classList.add("carousel__about");var a=document.createElement("p");a.classList.add("carousel__name");var c=document.createElement("p");c.classList.add("carousel__email");var l=document.createElement("p");return l.classList.add("carousel__commit"),e.setAttribute("href",t.commit.url),e.appendChild(i),i.textContent=Object(o.a)(t.commit.committer.date),e.appendChild(n),n.appendChild(r),r.setAttribute("src",t.author.avatar_url),n.appendChild(s),s.appendChild(a),a.textContent=t.commit.committer.name,s.appendChild(c),c.textContent=t.commit.committer.email,e.appendChild(l),l.textContent=t.commit.message,e}};c.getCommits().then(t=>{t.slice(s.b,s.c).forEach(t=>l.renderCommitCard(h.createCardCommit(t)))}).catch(t=>{alert(t+" Запрос не выполнен.")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,